import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.ListSelectionModel;

public class InstructorAttendence extends javax.swing.JFrame {

    /**
     * Creates new form InstructorAttendence
     */
    static String Id;
    Connection con;
    PreparedStatement pst ;
    ResultSet rs;
    String t, c, s, status;
    int sem, y;
    DefaultTableModel model;
    public InstructorAttendence(String Id) {
        this.Id = Id;
        model = new DefaultTableModel();
        initComponents();
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cms", "root", "root");
            pst = con.prepareStatement("SELECT DISTINCT semester FROM sections where ins_id = ?;");
            pst.setString(1, Id);
            rs = pst.executeQuery();
            
            DefaultComboBoxModel semesterModel = new DefaultComboBoxModel();
            while(rs.next()) {
                int semester_id = rs.getInt("semester");
                //String courseId = rs.getString("course_id");
                //String courseName = rs.getString("name");
                //model.addElement(courseId + " - " + courseName);
                semesterModel.addElement(semester_id + "");
            }
            semester.setModel(semesterModel);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        back_btn = new javax.swing.JLabel();
        mark = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        term = new javax.swing.JComboBox<>();
        year = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        course = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        section = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        save = new javax.swing.JButton();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        semester = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        attend = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1085, 600));

        jPanel3.setBackground(new java.awt.Color(7, 10, 82));
        jPanel3.setPreferredSize(new java.awt.Dimension(399, 95));

        jLabel1.setFont(new java.awt.Font("Dubai", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Class Attendance");
        jLabel1.setPreferredSize(new java.awt.Dimension(294, 47));

        back_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back.png"))); // NOI18N
        back_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                back_btnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(back_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(494, 494, 494))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(back_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mark.setBackground(new java.awt.Color(7, 10, 82));
        mark.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        mark.setForeground(new java.awt.Color(255, 255, 255));
        mark.setText("Mark Attendance");
        mark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(7, 10, 82));
        jLabel2.setText("Semester:");

        term.setBackground(new java.awt.Color(255, 255, 255));
        term.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        term.setForeground(new java.awt.Color(7, 10, 82));
        term.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        term.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termActionPerformed(evt);
            }
        });

        year.setBackground(new java.awt.Color(255, 255, 255));
        year.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        year.setForeground(new java.awt.Color(7, 10, 82));
        year.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(7, 10, 82));
        jLabel3.setText("Year:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(7, 10, 82));
        jLabel4.setText("Course:");

        course.setBackground(new java.awt.Color(255, 255, 255));
        course.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        course.setForeground(new java.awt.Color(7, 10, 82));
        course.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        course.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(7, 10, 82));
        jLabel5.setText("Section:");

        section.setBackground(new java.awt.Color(255, 255, 255));
        section.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        section.setForeground(new java.awt.Color(7, 10, 82));
        section.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        section.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(7, 10, 82));
        jLabel7.setText("Date: ");

        save.setBackground(new java.awt.Color(7, 10, 82));
        save.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jDateChooser.setDateFormatString("yyyy-MM-dd");
        jDateChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jDateChooserMouseExited(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(7, 10, 82));
        jLabel6.setText("Term: ");

        semester.setBackground(new java.awt.Color(255, 255, 255));
        semester.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        semester.setForeground(new java.awt.Color(7, 10, 82));
        semester.setToolTipText("");
        semester.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        semester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semesterActionPerformed(evt);
            }
        });

        attend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CMS_ID", "Student_Name", "Present", "Absent Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        attend.setRowSelectionAllowed(false);
        attend.getTableHeader().setResizingAllowed(false);
        attend.getTableHeader().setReorderingAllowed(false);
        attend.getTableHeader().setBackground(new java.awt.Color(255, 255, 255));
        attend.getTableHeader().setForeground(new java.awt.Color(7, 10, 82));
        attend.getTableHeader().setFont(new java.awt.Font("Dubai", 1, 14));
        if (attend.getColumnModel().getColumnCount() > 0) {
            attend.getColumnModel().getColumn(0).setResizable(false);
            attend.getColumnModel().getColumn(1).setResizable(false);
            attend.getColumnModel().getColumn(2).setResizable(false);
            attend.getColumnModel().getColumn(3).setResizable(false);
        }
        jScrollPane2.setViewportView(attend);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1265, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(semester, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(term, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(course, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(section, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(mark))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(1153, Short.MAX_VALUE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(4, 4, 4)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(course, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(semester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(term, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(jDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mark, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(section, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(634, Short.MAX_VALUE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(16, 16, 16)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void markActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markActionPerformed
        try {
            // TODO add your handling code here:
            if(jDateChooser.getDate() == null){
                JOptionPane.showMessageDialog(null, "Please select a date.", "Empty Date", JOptionPane.WARNING_MESSAGE);
            }
            else{
                Calendar cal = Calendar.getInstance();
                cal.setTime(jDateChooser.getDate());
                int year = cal.get(Calendar.YEAR);
                if (year < 2023) {
                    JOptionPane.showMessageDialog(null, "Year should be greater than or equal to 2023 for date of admission.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                model.setColumnIdentifiers(new Object[]{"CMS_ID", "Student_Name", "Present", "Absent Count"});          
                
                pst = con.prepareStatement("SELECT id, CONCAT(first_name, ' ', last_name) FROM personal_info WHERE id IN (SELECT cms_id FROM enrolled WHERE section_id = ? AND course_id = ? AND semester = ? AND term = ? AND year = ?);");                
                pst.setString(1, s);
                pst.setString(2, c);
                pst.setInt(3, sem);
                pst.setString(4, t);
                pst.setInt(5, y);
                rs = pst.executeQuery();
                //PreparedStatement st = con.prepareStatement("SELECT COUNT(status) FROM attendance WHERE status = 'absent' and cms_id = ? and semester = ? and term = ? and year = ? and course_id = ? and section_id = ?;");                

                while(rs.next()){
                    String cms = rs.getString("id");
                    String name = rs.getString("CONCAT(first_name, ' ', last_name)");
                    int absent = 0;
                    
                    pst = con.prepareStatement("SELECT COUNT(*) AS 'absent_count' FROM attendance WHERE ins_id = ? AND cms_id = ? AND section_id = ? AND course_id = ? AND semester = ? AND term = ? AND year = ? AND status = 'absent';");
                    pst.setString(1, Id);
                    pst.setString(2, cms);
                    pst.setString(3, s);
                    pst.setString(4, c);
                    pst.setInt(5, sem);
                    pst.setString(6, t);
                    pst.setInt(7, y);
                    ResultSet rsAbs = pst.executeQuery();
                    
                    if(rsAbs.next())
                        absent = rsAbs.getInt("absent_count");
                    
                    
                    JCheckBox checkBox = new JCheckBox();
                    checkBox.setSelected(true); // Initially set to true
                    checkBox.setEnabled(true); 
                   
                    
                    model.addRow(new Object[]{cms, name, checkBox.isSelected(), absent});
                }
                attend.setModel(model);
                attend.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    JTable target = (JTable) e.getSource();
                    int row = target.getSelectedRow();
                    int column = target.getSelectedColumn();
                    
                    // Check if the clicked cell contains a checkbox
                    if (column == 2 && target.getValueAt(row, column) instanceof JCheckBox) {
                        JCheckBox checkBox = (JCheckBox) target.getValueAt(row, column);
                        checkBox.setSelected(!checkBox.isSelected()); // Toggle checkbox state
                    }
                }
            });
                TableColumnModel columnModel = attend.getColumnModel();
                columnModel.getColumn(2).setCellEditor(new DefaultCellEditor(new JCheckBox()));
                // Set selection mode to select entire rows
                attend.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                columnModel.getColumn(2).setCellRenderer(new DefaultTableCellRenderer() {
                private final JCheckBox checkBox = new JCheckBox();

                {
                    checkBox.setHorizontalAlignment(JCheckBox.CENTER);
                }

                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    if (value != null && value instanceof Boolean) {
                        checkBox.setSelected((Boolean) value);
                    }
                    return checkBox;
                }
            });

        }
             
        } catch (SQLException ex) {
            Logger.getLogger(InstructorAttendence.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_markActionPerformed

    private void back_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_btnMouseClicked
        new InstructorHomePage(Id).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_back_btnMouseClicked

    private void termActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termActionPerformed
        try {
            // TODO add your handling code here:
            t = term.getSelectedItem().toString();
            
            DefaultComboBoxModel yearModel = new DefaultComboBoxModel();
            pst = con.prepareStatement("SELECT DISTINCT year FROM sections WHERE semester = ? and term = ?;");
            pst.setInt(1, sem);
            pst.setString(2, t);
            rs = pst.executeQuery();
            while(rs.next()){
                int y = rs.getInt("year");
                yearModel.addElement(y + "");
            }
            year.setModel(yearModel);
        } catch (SQLException ex) {
            Logger.getLogger(InstructorAttendence.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_termActionPerformed

    private void yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearActionPerformed
        try {
            // TODO add your handling code here:
            y = Integer.parseInt(year.getSelectedItem().toString());
            
            DefaultComboBoxModel courseModel = new DefaultComboBoxModel();
            //PreparedStatement pst = con.prepareStatement("SELECT DISTINCT sections.course_id, courses.name FROM sections INNER JOIN courses ON sections.course_id = courses.id WHERE ins_id = ?");

            pst = con.prepareStatement("SELECT DISTINCT sections.course_id, courses.name FROM sections INNER JOIN courses ON sections.course_id = courses.id WHERE sections.ins_id = ? and sections.semester = ? and sections.term = ? and sections.year = ?;");
            pst.setString(1, Id);
            pst.setInt(2, sem);
            pst.setString(3, t);
            pst.setInt(4, y);
            rs = pst.executeQuery();
            while(rs.next()){
                String courseId = rs.getString("course_id");
                String courseName = rs.getString("name");
                courseModel.addElement(courseId + ":" + courseName);
            }
            course.setModel(courseModel);
        } catch (SQLException ex) {
            Logger.getLogger(InstructorAttendence.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_yearActionPerformed

    private void courseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            String courses = course.getSelectedItem().toString();
            String[] courses_arr = courses.split(":");
            c = courses_arr[0];
            
            DefaultComboBoxModel sectionModel = new DefaultComboBoxModel();
            pst = con.prepareStatement("SELECT DISTINCT id FROM sections WHERE ins_id = ? and semester = ? and term = ? and year = ? and course_id = ?;");
            pst.setString(1, Id);
            pst.setInt(2, sem);
            pst.setString(3, t);
            pst.setInt(4, y);
            pst.setString(5, c);
            rs = pst.executeQuery();
            while(rs.next()){
                String sec = rs.getString("id");
                sectionModel.addElement(sec);
            }
            section.setModel(sectionModel);
        } catch (SQLException ex) {
            Logger.getLogger(InstructorAttendence.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_courseActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        try {
            // Get the selected date from the date chooser
            java.util.Date selectedDate = jDateChooser.getDate();
            java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());

            // Iterate over each row of the JTable
            for (int i = 0; i < model.getRowCount(); i++) {
                // Extract data from each row
                String cmsId = (String) model.getValueAt(i, 0); // CMS ID
                boolean present = (boolean) model.getValueAt(i, 2); // Checkbox status

                // Determine status based on checkbox
                String status = present ? "present" : "absent";

                // Execute SQL insert statement to insert attendance data
                pst = con.prepareStatement("INSERT INTO attendance (cms_id, section_id, course_id, semester, term, year, ins_id, status, creation_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
                pst.setString(1, cmsId);
                pst.setString(2, s);
                pst.setString(3, c);
                pst.setInt(4, sem);
                pst.setString(5, t);
                pst.setInt(6, y);
                pst.setString(7, Id);
                pst.setString(8, status);
                pst.setDate(9, sqlDate);
        
                pst.executeUpdate();
            }
            
            JOptionPane.showMessageDialog(null, "Attendance saved successfully.");
            new InstructorAttendence(Id).setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(InstructorAttendence.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error occurred while saving attendance: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
      
    }//GEN-LAST:event_saveActionPerformed

    private void semesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semesterActionPerformed
        try {
            // TODO add your handling code here:
            sem = Integer.parseInt(semester.getSelectedItem().toString());
            
            DefaultComboBoxModel termModel = new DefaultComboBoxModel();
            pst = con.prepareStatement("SELECT DISTINCT term FROM sections WHERE ins_id = ? and semester = ?;");
            pst.setString(1, Id);
            pst.setInt(2, sem);
            rs = pst.executeQuery();
            while(rs.next()){
                String term_ = rs.getString("term");
                termModel.addElement(term_);
            }
            term.setModel(termModel);
        } catch (SQLException ex) {
            Logger.getLogger(InstructorAttendence.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_semesterActionPerformed

    private void sectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionActionPerformed
        s = section.getSelectedItem().toString();
    }//GEN-LAST:event_sectionActionPerformed

    private void jDateChooserMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDateChooserMouseExited
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jDateChooserMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InstructorAttendence.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InstructorAttendence.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InstructorAttendence.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InstructorAttendence.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InstructorAttendence(Id).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable attend;
    private javax.swing.JLabel back_btn;
    private javax.swing.JComboBox<String> course;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mark;
    private javax.swing.JButton save;
    private javax.swing.JComboBox<String> section;
    private javax.swing.JComboBox<String> semester;
    private javax.swing.JComboBox<String> term;
    private javax.swing.JComboBox<String> year;
    // End of variables declaration//GEN-END:variables
}
